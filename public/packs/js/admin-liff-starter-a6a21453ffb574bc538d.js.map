{"version":3,"file":"js/admin-liff-starter-a6a21453ffb574bc538d.js","sources":["webpack:///webpack/bootstrap","webpack:///./app/javascript/channels/liff-starter.js","webpack:///./app/javascript/packs/admin-liff-starter.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/packs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app/javascript/packs/admin-liff-starter.js\");\n","window.onload = function() {\n    const useNodeJS = false;   // if you are not using a node server, set this value to false\n    const defaultLiffId = \"1656234930-4MZoRoZd\";   // change the default LIFF value if you are not using a node server\n\n    // DO NOT CHANGE THIS\n    let myLiffId = \"\";\n\n    // if node is used, fetch the environment variable and pass it to the LIFF method\n    // otherwise, pass defaultLiffId\n    if (useNodeJS) {\n        fetch('/send-id')\n            .then(function(reqResponse) {\n                return reqResponse.json();\n            })\n            .then(function(jsonResponse) {\n                myLiffId = jsonResponse.id;\n                initializeLiffOrDie(myLiffId);\n            })\n            .catch(function(error) {\n                document.getElementById(\"liffAppContent\").classList.add('hidden');\n                document.getElementById(\"nodeLiffIdErrorMessage\").classList.remove('hidden');\n            });\n    } else {\n        myLiffId = defaultLiffId;\n        initializeLiffOrDie(myLiffId);\n    }\n};\n\n/**\n* Check if myLiffId is null. If null do not initiate liff.\n* @param {string} myLiffId The LIFF ID of the selected element\n*/\nfunction initializeLiffOrDie(myLiffId) {\n    if (!myLiffId) {\n        document.getElementById(\"liffAppContent\").classList.add('hidden');\n        document.getElementById(\"liffIdErrorMessage\").classList.remove('hidden');\n    } else {\n        initializeLiff(myLiffId);\n    }\n}\n\n/**\n* Initialize LIFF\n* @param {string} myLiffId The LIFF ID of the selected element\n*/\nfunction initializeLiff(myLiffId) {\n    liff\n        .init({\n            liffId: myLiffId\n        })\n        .then(() => {\n            // start to use LIFF's api\n            initializeApp();\n        })\n        .catch((err) => {\n            document.getElementById(\"liffAppContent\").classList.add('hidden');\n            document.getElementById(\"liffInitErrorMessage\").classList.remove('hidden');\n        });\n}\n\n/**\n * Initialize the app by calling functions handling individual app components\n */\nfunction initializeApp() {\n    displayLiffData();\n    displayIsInClientInfo();\n    registerButtonHandlers();\n\n    // check if the user is logged in/out, and disable inappropriate button\n    if (liff.isLoggedIn()) {\n        document.getElementById('liffLoginButton').disabled = true;\n    } else {\n        document.getElementById('liffLogoutButton').disabled = true;\n    }\n}\n\n/**\n* Display data generated by invoking LIFF methods\n*/\nfunction displayLiffData() {\n    document.getElementById('browserLanguage').textContent = liff.getLanguage();\n    document.getElementById('sdkVersion').textContent = liff.getVersion();\n    document.getElementById('lineVersion').textContent = liff.getLineVersion();\n    document.getElementById('isInClient').textContent = liff.isInClient();\n    document.getElementById('isLoggedIn').textContent = liff.isLoggedIn();\n    document.getElementById('deviceOS').textContent = liff.getOS();\n}\n\n/**\n* Toggle the login/logout buttons based on the isInClient status, and display a message accordingly\n*/\nfunction displayIsInClientInfo() {\n    if (liff.isInClient()) {\n        document.getElementById('liffLoginButton').classList.toggle('hidden');\n        document.getElementById('liffLogoutButton').classList.toggle('hidden');\n        document.getElementById('isInClientMessage').textContent = 'You are opening the app in the in-app browser of LINE.';\n    } else {\n        document.getElementById('isInClientMessage').textContent = 'You are opening the app in an external browser.';\n        document.getElementById('shareTargetPicker').classList.toggle('hidden');\n    }\n}\n\n/**\n* Register event handlers for the buttons displayed in the app\n*/\nfunction registerButtonHandlers() {\n    // openWindow call\n    document.getElementById('openWindowButton').addEventListener('click', function() {\n        liff.openWindow({\n            url: 'https://line.me',\n            external: true\n        });\n    });\n\n    // closeWindow call\n    document.getElementById('closeWindowButton').addEventListener('click', function() {\n        if (!liff.isInClient()) {\n            sendAlertIfNotInClient();\n        } else {\n            liff.closeWindow();\n        }\n    });\n\n    // sendMessages call\n    document.getElementById('sendMessageButton').addEventListener('click', function() {\n        if (!liff.isInClient()) {\n            sendAlertIfNotInClient();\n        } else {\n            liff.sendMessages([{\n                'type': 'text',\n                'text': \"You've successfully sent a message! Hooray!\"\n            }]).then(function() {\n                window.alert('Message sent');\n            }).catch(function(error) {\n                window.alert('Error sending message: ' + error);\n            });\n        }\n    });\n\n    // get access token\n    document.getElementById('getAccessToken').addEventListener('click', function() {\n        if (!liff.isLoggedIn() && !liff.isInClient()) {\n            alert('To get an access token, you need to be logged in. Please tap the \"login\" button below and try again.');\n        } else {\n            const accessToken = liff.getAccessToken();\n            document.getElementById('accessTokenField').textContent = accessToken;\n            toggleAccessToken();\n        }\n    });\n\n    // get profile call\n    document.getElementById('getProfileButton').addEventListener('click', function() {\n        liff.getProfile().then(function(profile) {\n            document.getElementById('userIdProfileField').textContent = profile.userId;\n            document.getElementById('displayNameField').textContent = profile.displayName;\n\n            const profilePictureDiv = document.getElementById('profilePictureDiv');\n            if (profilePictureDiv.firstElementChild) {\n                profilePictureDiv.removeChild(profilePictureDiv.firstElementChild);\n            }\n            const img = document.createElement('img');\n            img.src = profile.pictureUrl;\n            img.alt = 'Profile Picture';\n            profilePictureDiv.appendChild(img);\n\n            document.getElementById('statusMessageField').textContent = profile.statusMessage;\n            toggleProfileData();\n        }).catch(function(error) {\n            window.alert('Error getting profile: ' + error);\n        });\n    });\n\n    document.getElementById('shareTargetPicker').addEventListener('click', function () {\n        if (liff.isApiAvailable('shareTargetPicker')) {\n            liff.shareTargetPicker([{\n                'type': 'text',\n                'text': 'Hello, World!'\n            }]).then(\n                document.getElementById('shareTargetPickerMessage').textContent = \"Share target picker was launched.\"\n            ).catch(function (res) {\n                document.getElementById('shareTargetPickerMessage').textContent = \"Failed to launch share target picker.\";\n            });\n        } else {\n            document.getElementById('shareTargetPickerMessage').innerHTML = \"<div>Share target picker unavailable.<div><div>This is possibly because you haven't enabled the share target picker on <a href='https://developers.line.biz/console/'>LINE Developers Console</a>.</div>\";\n        }\n    });\n\n    // login call, only when external browser is used\n    document.getElementById('liffLoginButton').addEventListener('click', function() {\n        if (!liff.isLoggedIn()) {\n            // set `redirectUri` to redirect the user to a URL other than the front page of your LIFF app.\n            liff.login();\n        }\n    });\n\n    // logout call only when external browse\n    document.getElementById('liffLogoutButton').addEventListener('click', function() {\n        if (liff.isLoggedIn()) {\n            liff.logout();\n            window.location.reload();\n        }\n    });\n}\n\n/**\n* Alert the user if LIFF is opened in an external browser and unavailable buttons are tapped\n*/\nfunction sendAlertIfNotInClient() {\n    alert('This button is unavailable as LIFF is currently being opened in an external browser.');\n}\n\n/**\n* Toggle access token data field\n*/\nfunction toggleAccessToken() {\n    toggleElement('accessTokenData');\n}\n\n/**\n* Toggle profile info field\n*/\nfunction toggleProfileData() {\n    toggleElement('profileInfo');\n}\n\n/**\n* Toggle specified element\n* @param {string} elementId The ID of the selected element\n*/\nfunction toggleElement(elementId) {\n    const elem = document.getElementById(elementId);\n    if (elem.offsetWidth > 0 && elem.offsetHeight > 0) {\n        elem.style.display = 'none';\n    } else {\n        elem.style.display = 'block';\n    }\n}\n","import '../channels/liff-starter.js'"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5OA;AAAA;AAAA;;;;;A","sourceRoot":""}